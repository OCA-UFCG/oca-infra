---
# tasks file for role/monitor
- name: Ensure the alertmanager directory exists
  file:
    path: ./alertmanager
    state: directory

- name: Ensure the blackbox directory exists
  file:
    path: ./blackbox
    state: directory

- name: Ensure the prometheus directory exists
  file:
    path: ./prometheus
    state: directory

- name: Create the alertmanager.yml file
  template:
    src: alertmanager.yml
    dest: ./alertmanager/alertmanager.yml

- name: Create the blackbox-config.yml file
  template:
    src: blackbox-config.yml
    dest: ./blackbox/blackbox-config.yml

- name: Create the prometheus.yml file
  template:
    src: prometheus.yml
    dest: ./prometheus/prometheus.yml

- name: Create the prometheus alert.yml file
  copy:
    dest: ./prometheus/alerts.yml
    content: |
      groups:
        - name: AlertsfromOca
          rules:
            - alert: HostOutOfMemory
              expr: (node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 20) * on(instance) group_left (nodename) node_uname_info{nodename=~".+"}
              for: 2m
              labels:
                severity: warning
              annotations:
                summary: Host out of memory (instance {{ $labels.instance }})
                description: "Node memory is filling up (< 20% left)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

            - alert: HostOutOfDiskSpace
              expr: ((node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 20 and ON (instance, device, mountpoint) node_filesystem_readonly == 0) * on(instance) group_left (nodename) node_uname_info{nodename=~".+"}
              for: 2m
              labels:
                severity: warning
              annotations:
                summary: Host out of disk space (instance {{ $labels.instance }})
                description: "Disk is almost full (< 20% left)\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

            - alert: HostHighCpuLoad
              expr: (sum by (instance) (avg by (mode, instance) (rate(node_cpu_seconds_total{mode!='idle'}[2m]))) > 0.8) * on(instance) group_left (nodename) node_uname_info{nodename=~'.+'}
              for: 10m
              labels:
                severity: warning
              annotations:
                summary: Host high CPU load (instance {{ $labels.instance }})
                description: "CPU load is > 80%\n  VALUE = {{ $value }}\n  LABELS = {{ $labels }}"

            - alert: InstanceDown
              expr: up == 0
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: "Oca instance down"
                description: "OCA is down"

            - alert: ServiceDown
              expr: probe_success == 0
              for: 2m
              labels:
                severity: critical
              annotations:
                summary: "Service is down (instance {{ $labels.instance }})"
                description: "The service is not responding. Probe result: {{ $value }}\n  LABELS = {{ $labels }}"

- name: Create the docker-compose.yml file
  copy:
    dest: ./docker-compose.yml
    content: |
      networks:
        monitoring:

      volumes:
        prometheus-data: {}
        alertmanager-data: {}

      services:
        alertmanager:
          image: prom/alertmanager:latest
          container_name: alert-manager
          restart: unless-stopped
          volumes:
            - "./alertmanager:/config"
            - ./alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml
            - alertmanager-data:/data
          command: --config.file=/config/alertmanager.yml --log.level=debug
          ports:
            - 9093:9093
          networks:
            - monitoring

        blackbox_exporter:
          image: prom/blackbox-exporter:latest
          container_name: blackbox-exporter
          restart: unless-stopped
          ports:
            - 9115:9115
          networks:
            - monitoring
          command:
            - "--config.file=/etc/blackbox_exporter/blackbox-config.yml"
            - "--web.listen-address=0.0.0.0:9115"
            - "--log.level=info"
          volumes:
            - ./blackbox/blackbox-config.yml:/etc/blackbox_exporter/blackbox-config.yml

        prometheus:
          image: prom/prometheus:latest
          container_name: prometheus
          restart: unless-stopped
          volumes:
            - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
            - prometheus-data:/prometheus
            - ./prometheus/alerts.yml:/etc/prometheus/alerts.yml
          command:
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/etc/prometheus/console_libraries"
            - "--web.console.templates=/etc/prometheus/consoles"
            - "--web.enable-lifecycle"
          ports:
            - 9090:9090
          networks:
            - monitoring
          user: root

        grafana:
          image: grafana/grafana:latest
          container_name: grafana
          restart: unless-stopped
          ports:
            - 3001:3000
          networks:
            - monitoring

- name: Run Docker Compose up
  become: True
  shell:
    cmd: "docker compose -f ./docker-compose.yml up -d"
